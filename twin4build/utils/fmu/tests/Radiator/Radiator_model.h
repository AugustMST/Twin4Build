/* Simulation code for Radiator generated by the OpenModelica Compiler OpenModelica v1.18.0 (64-bit). */
#if !defined(Radiator__MODEL_H)
#define Radiator__MODEL_H

#include "openmodelica.h"
#include "openmodelica_func.h"
#include "simulation_data.h"
#include "simulation/simulation_info_json.h"
#include "simulation/simulation_runtime.h"
#include "util/omc_error.h"
#include "util/parallel_helper.h"
#include "simulation/solver/model_help.h"
#include "simulation/solver/delay.h"
#include "simulation/solver/linearSystem.h"
#include "simulation/solver/nonlinearSystem.h"
#include "simulation/solver/mixedSystem.h"
#include "simulation/solver/spatialDistribution.h"

#if defined(__cplusplus)
extern "C" {
#endif

#include <string.h>

#include "Radiator_functions.h"

#define Buildings_Utilities_Math_Functions_regNonZeroPower_index 0
#define Modelica_Fluid_Utilities_checkBoundary_index 1
#define Modelica_Utilities_Streams_error_index 2
#define Radiator_Radiator_Medium_ThermodynamicState_index 3
#define Radiator_Radiator_Medium_setState__pTX_index 4
#define Radiator_Radiator_Medium_specificHeatCapacityCp_index 5
#define Radiator_Radiator_res_Medium_ThermodynamicState_index 6
#define Radiator_Radiator_res_Medium_dynamicViscosity_index 7
#define Radiator_Radiator_vol_Medium_ThermodynamicState_index 8
#define Radiator_Radiator_vol_Medium_temperature__phX_index 9
#define Radiator_Radiator_vol_dynBal_Medium_ThermodynamicState_index 10
#define Radiator_Radiator_vol_dynBal_Medium_density_index 11
#define Radiator_Radiator_vol_dynBal_Medium_setState__pTX_index 12
#define Radiator_Radiator_vol_dynBal_Medium_specificEnthalpy__pTX_index 13
#define Radiator_Radiator_vol_dynBal_Medium_specificInternalEnergy_index 14
#define Radiator_flow__sink_Medium_ThermodynamicState_index 15
#define Radiator_flow__sink_Medium_setState__pTX_index 16
#define Radiator_flow__sink_Medium_specificEnthalpy_index 17
#define Radiator_flow__source_Medium_ThermodynamicState_index 18
#define Radiator_flow__source_Medium_setState__pTX_index 19
#define Radiator_flow__source_Medium_specificEnthalpy_index 20

extern void Radiator_callExternalObjectDestructors(DATA *_data, threadData_t *threadData);
#if !defined(OMC_NUM_NONLINEAR_SYSTEMS) || OMC_NUM_NONLINEAR_SYSTEMS>0
extern void Radiator_initialNonLinearSystem(int nNonLinearSystems, NONLINEAR_SYSTEM_DATA *data);
#endif
#if !defined(OMC_NUM_LINEAR_SYSTEMS) || OMC_NUM_LINEAR_SYSTEMS>0
extern void Radiator_initialLinearSystem(int nLinearSystems, LINEAR_SYSTEM_DATA *data);
#endif
#if !defined(OMC_NUM_MIXED_SYSTEMS) || OMC_NUM_MIXED_SYSTEMS>0
#endif
#if !defined(OMC_NO_STATESELECTION)
extern void Radiator_initializeStateSets(int nStateSets, STATE_SET_DATA* statesetData, DATA *data);
#endif
extern int Radiator_functionAlgebraics(DATA *data, threadData_t *threadData);
extern int Radiator_function_storeDelayed(DATA *data, threadData_t *threadData);
extern int Radiator_function_storeSpatialDistribution(DATA *data, threadData_t *threadData);
extern int Radiator_function_initSpatialDistribution(DATA *data, threadData_t *threadData);
extern int Radiator_updateBoundVariableAttributes(DATA *data, threadData_t *threadData);
extern int Radiator_functionInitialEquations(DATA *data, threadData_t *threadData);
extern int Radiator_functionInitialEquations_lambda0(DATA *data, threadData_t *threadData);
extern int Radiator_functionRemovedInitialEquations(DATA *data, threadData_t *threadData);
extern int Radiator_updateBoundParameters(DATA *data, threadData_t *threadData);
extern int Radiator_checkForAsserts(DATA *data, threadData_t *threadData);
extern int Radiator_function_ZeroCrossingsEquations(DATA *data, threadData_t *threadData);
extern int Radiator_function_ZeroCrossings(DATA *data, threadData_t *threadData, double* gout);
extern int Radiator_function_updateRelations(DATA *data, threadData_t *threadData, int evalZeroCross);
extern const char* Radiator_zeroCrossingDescription(int i, int **out_EquationIndexes);
extern const char* Radiator_relationDescription(int i);
extern void Radiator_function_initSample(DATA *data, threadData_t *threadData);
extern int Radiator_initialAnalyticJacobianG(void* data, threadData_t *threadData, ANALYTIC_JACOBIAN *jacobian);
extern int Radiator_initialAnalyticJacobianA(void* data, threadData_t *threadData, ANALYTIC_JACOBIAN *jacobian);
extern int Radiator_initialAnalyticJacobianB(void* data, threadData_t *threadData, ANALYTIC_JACOBIAN *jacobian);
extern int Radiator_initialAnalyticJacobianC(void* data, threadData_t *threadData, ANALYTIC_JACOBIAN *jacobian);
extern int Radiator_initialAnalyticJacobianD(void* data, threadData_t *threadData, ANALYTIC_JACOBIAN *jacobian);
extern int Radiator_initialAnalyticJacobianF(void* data, threadData_t *threadData, ANALYTIC_JACOBIAN *jacobian);
extern int Radiator_functionJacG_column(void* data, threadData_t *threadData, ANALYTIC_JACOBIAN *thisJacobian, ANALYTIC_JACOBIAN *parentJacobian);
extern int Radiator_functionJacA_column(void* data, threadData_t *threadData, ANALYTIC_JACOBIAN *thisJacobian, ANALYTIC_JACOBIAN *parentJacobian);
extern int Radiator_functionJacB_column(void* data, threadData_t *threadData, ANALYTIC_JACOBIAN *thisJacobian, ANALYTIC_JACOBIAN *parentJacobian);
extern int Radiator_functionJacC_column(void* data, threadData_t *threadData, ANALYTIC_JACOBIAN *thisJacobian, ANALYTIC_JACOBIAN *parentJacobian);
extern int Radiator_functionJacD_column(void* data, threadData_t *threadData, ANALYTIC_JACOBIAN *thisJacobian, ANALYTIC_JACOBIAN *parentJacobian);
extern int Radiator_functionJacF_column(void* data, threadData_t *threadData, ANALYTIC_JACOBIAN *thisJacobian, ANALYTIC_JACOBIAN *parentJacobian);
extern const char* Radiator_linear_model_frame(void);
extern const char* Radiator_linear_model_datarecovery_frame(void);
extern int Radiator_mayer(DATA* data, modelica_real** res, short *);
extern int Radiator_lagrange(DATA* data, modelica_real** res, short *, short *);
extern int Radiator_pickUpBoundsForInputsInOptimization(DATA* data, modelica_real* min, modelica_real* max, modelica_real*nominal, modelica_boolean *useNominal, char ** name, modelica_real * start, modelica_real * startTimeOpt);
extern int Radiator_setInputData(DATA *data, const modelica_boolean file);
extern int Radiator_getTimeGrid(DATA *data, modelica_integer * nsi, modelica_real**t);
extern void Radiator_function_initSynchronous(DATA * data, threadData_t *threadData);
extern void Radiator_function_updateSynchronous(DATA * data, threadData_t *threadData, long clockIndex);
extern int Radiator_function_equationsSynchronous(DATA * data, threadData_t *threadData, long clockIndex);
extern void Radiator_read_input_fmu(MODEL_DATA* modelData, SIMULATION_INFO* simulationData);
extern void Radiator_function_savePreSynchronous(DATA *data, threadData_t *threadData);
extern int Radiator_inputNames(DATA* data, char ** names);
extern int Radiator_dataReconciliationInputNames(DATA* data, char ** names);
extern int Radiator_initializeDAEmodeData(DATA *data, DAEMODE_DATA*);
extern int Radiator_functionLocalKnownVars(DATA*, threadData_t*);
extern int Radiator_symbolicInlineSystem(DATA*, threadData_t*);

#include "Radiator_literals.h"




#if defined(HPCOM) && !defined(_OPENMP)
  #error "HPCOM requires OpenMP or the results are wrong"
#endif
#if defined(_OPENMP)
  #include <omp.h>
#else
  /* dummy omp defines */
  #define omp_get_max_threads() 1
#endif

#if defined(__cplusplus)
}
#endif

#endif /* !defined(Radiator__MODEL_H) */


